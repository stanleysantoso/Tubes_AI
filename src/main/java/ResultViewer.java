import weka.classifiers.Evaluation;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.*;
import java.util.ArrayList;
import java.util.List;
import java.util.Scanner;

/**
 * Created by Stanley on 12/1/2015.
 */
public class ResultViewer extends JFrame {
    private JPanel resultPanel;
    private JTable resultTable;
    private JTextArea matrixTextArea;
    private JTable classDetailsTable;
    private JButton exportButton;
    private String resourcePath = this.getClass().getResource("data").getPath() + "/";

    public ResultViewer(Evaluation eval) throws Exception {
        super("Results");
        final FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File (arff)", "arff", "text");
        DefaultTableModel tableModel = null;
        List<String> columnNames = new ArrayList<>();

        Scanner scnr = null;
        try {
            File resultFile = new File(resourcePath + "labeled_result.arff");
            scnr = new Scanner(resultFile);
        } catch (FileNotFoundException e) {
            System.out.println("File not found !");
        }
        do {
            String line = scnr.nextLine();
            if (line.contains("@attribute")) {
                columnNames.add(line.split(" ")[1]);
            }
            if (line.contains("@data")) {
                tableModel = new DefaultTableModel(columnNames.toArray(), 0);
            }
            if (!line.contains("@") && line.length() > 0) {
                tableModel.addRow(line.split(","));
            }


        } while (scnr.hasNext());

        exportButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fc = new JFileChooser();
                fc.setFileFilter(filter);
                fc.showSaveDialog(resultPanel);
                String output = fc.getSelectedFile().getAbsolutePath();
                if (!output.contains(".arff")) {
                    output += ".arff";
                }
                Export(output);
            }
        });

        classDetailsTable.setModel(getClassDetails(eval));
        matrixTextArea.setText(eval.toMatrixString());
        resultTable.setModel(tableModel);
        setContentPane(resultPanel);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        pack();
        setVisible(true);

    }

    public DefaultTableModel getClassDetails(Evaluation eval) throws Exception {
        DefaultTableModel tModel = null;
        String[] lines = eval.toClassDetailsString().split("\n");

        ArrayList<String> columnNames = new ArrayList<>();
        for (String line : lines) {
            if (line.contains("Class") && !line.contains("==")) {
                String[] tempCol = line.split("\\s +");
                for (String col : tempCol) {
                    columnNames.add(col);

                }
                tModel = new DefaultTableModel(columnNames.toArray(), 0);
            } else if (line.length() > 40) {
                ArrayList<String> val = new ArrayList<>();
                String[] tempRow = line.split("\\s +");
                for (String row : tempRow) {
                    val.add(row);
                }
                tModel.addRow(val.toArray());
            }
        }
        return tModel;
    }

    public void Export(String path) {
        File file = new File(resourcePath + "labeled_result.arff");
        Scanner scanner = null;
        Writer writer = null;
        try {
            scanner = new Scanner(file);
            writer = new BufferedWriter(new OutputStreamWriter(
                    new FileOutputStream(path), "utf-8"));
            String line = null;
            do {
                line = scanner.nextLine();
                writer.write(line + "\n");
            } while (scanner.hasNext());

        } catch (IOException e) {
            e.printStackTrace();
        } finally {
            try {
                writer.close();
            } catch (Exception ex) {
                ex.printStackTrace();
            }
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        resultPanel = new JPanel();
        resultPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(3, 3, new Insets(10, 10, 10, 10), -1, -1));
        resultPanel.setAlignmentX(0.5f);
        resultPanel.setAlignmentY(0.5f);
        resultPanel.setPreferredSize(new Dimension(940, 300));
        final JScrollPane scrollPane1 = new JScrollPane();
        scrollPane1.setAlignmentX(0.5f);
        scrollPane1.setAlignmentY(0.5f);
        resultPanel.add(scrollPane1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, new Dimension(-1, 350), 0, false));
        resultTable = new JTable();
        scrollPane1.setViewportView(resultTable);
        final JLabel label1 = new JLabel();
        label1.setText("Labeled Results");
        resultPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(0, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        matrixTextArea = new JTextArea();
        resultPanel.add(matrixTextArea, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_NORTHWEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, new Dimension(150, 50), null, 0, false));
        final JScrollPane scrollPane2 = new JScrollPane();
        resultPanel.add(scrollPane2, new com.intellij.uiDesigner.core.GridConstraints(1, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_BOTH, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, new Dimension(-1, 200), 0, false));
        classDetailsTable = new JTable();
        classDetailsTable.setIntercellSpacing(new Dimension(3, 3));
        scrollPane2.setViewportView(classDetailsTable);
        final JLabel label2 = new JLabel();
        label2.setText("Detailed Accuracy By Class");
        resultPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(0, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exportButton = new JButton();
        exportButton.setText("Save Results");
        resultPanel.add(exportButton, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return resultPanel;
    }
}
