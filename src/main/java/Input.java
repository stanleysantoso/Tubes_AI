import weka.classifiers.Evaluation;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.xml.transform.Result;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

/**
 * Created by Stanley on 12/1/2015.
 */
public class Input extends JFrame {
    private JPanel inputPanel;
    private JFormattedTextField trainingSetPath;
    private JButton browseButton;
    private JRadioButton kNNRadioButton;
    private JRadioButton naiveBayesRadioButton;
    private JRadioButton fullTrainingRadioButton;
    private JRadioButton tenFoldRadioButton;
    private JButton executeButton;
    private JTextField testSetPath;
    private JButton browseButton1;
    private JTextField kNum;


    public Input() {
        super("Main Menu");
        try {
            UIManager.setLookAndFeel("com.sun.java.swing.plaf.windows.WindowsLookAndFeel");
        } catch (ClassNotFoundException e) {
            e.printStackTrace();
        } catch (InstantiationException e) {
            e.printStackTrace();
        } catch (IllegalAccessException e) {
            e.printStackTrace();
        } catch (UnsupportedLookAndFeelException e) {
            e.printStackTrace();
        }
        final ButtonGroup algorithmGroup = new ButtonGroup();
        final ButtonGroup methodGroup = new ButtonGroup();
        final FileNameExtensionFilter filter = new FileNameExtensionFilter("Text File (arff)", "arff", "text");
        kNNRadioButton.setActionCommand("kNN");
        naiveBayesRadioButton.setActionCommand("NB");
        fullTrainingRadioButton.setActionCommand("fulltraining");
        tenFoldRadioButton.setActionCommand("10fold");
        algorithmGroup.add(kNNRadioButton);
        algorithmGroup.add(naiveBayesRadioButton);
        methodGroup.add(fullTrainingRadioButton);
        methodGroup.add(tenFoldRadioButton);
        browseButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fc = new JFileChooser();
                fc.setFileFilter(filter);
                fc.showOpenDialog(inputPanel);
                String output;
                trainingSetPath.setText(fc.getSelectedFile().getAbsolutePath());
            }
        });
        browseButton1.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser fc = new JFileChooser();
                fc.setFileFilter(filter);
                fc.showOpenDialog(inputPanel);
                String output;
                testSetPath.setText(fc.getSelectedFile().getAbsolutePath());
            }
        });


        executeButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (algorithmGroup.getSelection() != null && methodGroup.getSelection() != null) {
                    WekaClassifier wk = new WekaClassifier();
                    Evaluation eval = null;
                    String algorithmSelection = algorithmGroup.getSelection().getActionCommand();
                    String methodSelection = methodGroup.getSelection().getActionCommand();
                    int opt = 0;
                    if (methodSelection.equals("fulltraining")) {
                        opt = 1;
                    } else {
                        opt = 2;
                    }
                    if (algorithmSelection.equals("kNN")) {
                        kNN knn = new kNN(trainingSetPath.getText(), testSetPath.getText(), opt, new Integer(kNum.getText()));
                        try {
                            eval = wk.getEvalWeka(1, opt, trainingSetPath.getText());
                        } catch (Exception e1) {
                            e1.printStackTrace();
                        }
                    } else {
                        NaiveBayes nb = new NaiveBayes(trainingSetPath.getText(), testSetPath.getText(), opt);
                        NBViewer modelView = new NBViewer();
                        try {
                            eval = wk.getEvalWeka(2, opt, trainingSetPath.getText());
                        } catch (Exception e1) {
                            e1.printStackTrace();
                        }
                    }
                    try {
                        ResultViewer resultView = new ResultViewer(eval);
                    } catch (Exception e1) {
                        e1.printStackTrace();
                    }

                }
            }
        });
        setContentPane(inputPanel);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        pack();
        setVisible(true);
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        inputPanel = new JPanel();
        inputPanel.setLayout(new com.intellij.uiDesigner.core.GridLayoutManager(6, 4, new Insets(10, 10, 10, 10), -1, -1));
        inputPanel.setEnabled(true);
        final JLabel label1 = new JLabel();
        label1.setText("TrainingSet");
        inputPanel.add(label1, new com.intellij.uiDesigner.core.GridConstraints(1, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        final JLabel label2 = new JLabel();
        label2.setText("Algorithm");
        inputPanel.add(label2, new com.intellij.uiDesigner.core.GridConstraints(3, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        kNNRadioButton = new JRadioButton();
        kNNRadioButton.setText("kNN");
        inputPanel.add(kNNRadioButton, new com.intellij.uiDesigner.core.GridConstraints(3, 1, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label3 = new JLabel();
        label3.setText("Method");
        inputPanel.add(label3, new com.intellij.uiDesigner.core.GridConstraints(4, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        fullTrainingRadioButton = new JRadioButton();
        fullTrainingRadioButton.setText("Full Training");
        inputPanel.add(fullTrainingRadioButton, new com.intellij.uiDesigner.core.GridConstraints(4, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        naiveBayesRadioButton = new JRadioButton();
        naiveBayesRadioButton.setText("Naive Bayes");
        inputPanel.add(naiveBayesRadioButton, new com.intellij.uiDesigner.core.GridConstraints(3, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        tenFoldRadioButton = new JRadioButton();
        tenFoldRadioButton.setText("10 Fold Cross Validation");
        inputPanel.add(tenFoldRadioButton, new com.intellij.uiDesigner.core.GridConstraints(4, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        browseButton = new JButton();
        browseButton.setText("Browse..");
        inputPanel.add(browseButton, new com.intellij.uiDesigner.core.GridConstraints(1, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(25, -1), null, 0, false));
        executeButton = new JButton();
        executeButton.setText("Execute");
        inputPanel.add(executeButton, new com.intellij.uiDesigner.core.GridConstraints(5, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(25, -1), null, 0, false));
        trainingSetPath = new JFormattedTextField();
        trainingSetPath.setText("");
        inputPanel.add(trainingSetPath, new com.intellij.uiDesigner.core.GridConstraints(1, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(80, -1), null, 0, false));
        final JLabel label4 = new JLabel();
        label4.setText("Run Algorithm");
        inputPanel.add(label4, new com.intellij.uiDesigner.core.GridConstraints(0, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        final JLabel label5 = new JLabel();
        label5.setText("TestSet");
        inputPanel.add(label5, new com.intellij.uiDesigner.core.GridConstraints(2, 0, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_NONE, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        testSetPath = new JTextField();
        testSetPath.setText("");
        inputPanel.add(testSetPath, new com.intellij.uiDesigner.core.GridConstraints(2, 1, 1, 2, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        browseButton1 = new JButton();
        browseButton1.setText("Browse..");
        inputPanel.add(browseButton1, new com.intellij.uiDesigner.core.GridConstraints(2, 3, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_CENTER, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_SHRINK | com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_CAN_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        kNum = new JTextField();
        inputPanel.add(kNum, new com.intellij.uiDesigner.core.GridConstraints(3, 2, 1, 1, com.intellij.uiDesigner.core.GridConstraints.ANCHOR_WEST, com.intellij.uiDesigner.core.GridConstraints.FILL_HORIZONTAL, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_WANT_GROW, com.intellij.uiDesigner.core.GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(150, -1), null, 0, false));
        ButtonGroup buttonGroup;
        buttonGroup = new ButtonGroup();
        buttonGroup.add(kNNRadioButton);
        buttonGroup.add(naiveBayesRadioButton);
        buttonGroup = new ButtonGroup();
        buttonGroup.add(fullTrainingRadioButton);
        buttonGroup.add(tenFoldRadioButton);
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return inputPanel;
    }
}
